{"version":3,"file":"static/js/247.06db08ca.chunk.js","mappings":"8PAqEA,UAtDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAgBA,IAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEHC,EAAAA,EAAAA,GAAU,SAAD,OAAUX,EAAV,aAFN,OAEhBY,EAFgB,OAItBJ,GAAYI,EAAKC,KAAKC,QACtBV,EAASQ,EAAKC,MALQ,gDAOtBP,GAAW,GAPW,yDAAH,qDAWvBI,GACD,GAAE,CAACV,IACCG,EACL,OACE,+BACGA,GACCA,EAAMY,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACR,UAAC,KAAD,YACE,SAAC,KAAD,WACE,gBACEC,IACED,EACIE,kCAA0BF,EAjC9C,oKAoCcG,IAAI,QACJC,MAAM,WAGV,SAAC,IAAD,WACE,wBAAKN,OAEP,SAAC,KAAD,UAAYC,MAfAD,EADN,IAmBXT,IACC,SAAC,IAAD,UAAc,6CACb,IACFF,IACC,UAAC,IAAD,WAAc,2BAAyBA,OAI9C,C,qICjEYkB,EAAUC,EAAAA,EAAAA,IAAH,6DACJ,qBAAGC,MAAkBC,QAAQC,KAA7B,IAIHC,EAAUJ,EAAAA,EAAAA,IAAH,6GAOPK,EAAYL,EAAAA,EAAAA,EAAH,mE,sECZTM,E,QAASN,EAAAA,IAAH,4L,SCCNO,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,OACE,UAACF,EAAD,CAAQG,KAAK,QAAb,WACE,wBAAI,wBACJ,uBAAID,MAGT,C,yGCRYE,EAAaV,EAAAA,EAAAA,IAAH,gEAGP,qBAAGC,MAAkBC,QAAQC,KAA7B,IAGHQ,EAAaX,EAAAA,EAAAA,GAAH,8C,+FCJjBY,EACJ,6NACIC,EAAW,gCAAjB,SAEe1B,EAAU,EAAVA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAAyB2B,EAAUC,GAAnC,uFACyBC,EAAAA,EAAAA,IAAA,UAAaH,GAAb,OAAwBC,GAAY,CACzDC,QAAO,kBACFA,GADC,IAEJE,SAAU,UAEZC,QAAS,CACPC,cAAeP,EACfQ,OAAQ,sBARd,YACQC,EADR,iDAYWA,EAASjC,MAZpB,aAcU,IAAIkC,MAAM,mBAdpB,kEAuCA,MAEAnC,EAAUoC,UAAY,CACpBT,SAAUU,IAAAA,OAAAA,WACVT,OAAQS,IAAAA,O","sources":["components/Cast/Cast.jsx","components/Cast/Cast.styled.jsx","components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","components/MoviesContainer/MovisContainer.styled.jsx","servises/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n// import { useStateContext } from 'Context/StateContext';\nimport { MoviesList } from 'components/MoviesContainer/MovisContainer.styled';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport getMovies from 'servises/api';\nimport { Character, ImgWrap, Wrapper } from './Cast.styled';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\n\nconst baseImgUrl = 'https://image.tmdb.org/t/p/';\nconst posterSize = 'w200';\nconst defaultImg =\n  'https://pixabay.com/get/gf4201b2776d3ef00ca47b99d7c2be5d3293d07fa7340c4b1a34e2b1cbaa75782da6643825efb9764753eb4e54fcb2d343599d59a9850206fd172e16607af5daf_640.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  // const { casts, setCasts } = useStateContext();\n  const [casts, setCasts] = useState(null);\n  const [isError, setIsError] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(true);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const data = await getMovies(`movie/${movieId}/credits`);\n\n        setIsEmpty(!data.cast.length);\n        setCasts(data.cast);\n      } catch (error) {\n        setIsError(true);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n  if (!casts) return;\n  return (\n    <section>\n      {casts &&\n        casts.map(({ name, character, profile_path }) => (\n          <Wrapper key={name}>\n            <ImgWrap>\n              <img\n                src={\n                  profile_path\n                    ? baseImgUrl + posterSize + profile_path\n                    : defaultImg\n                }\n                alt=\"actor\"\n                width=\"200\"\n              />\n            </ImgWrap>\n            <MoviesList>\n              <li>{name}</li>\n            </MoviesList>\n            <Character>{character}</Character>\n          </Wrapper>\n        ))}\n      {isEmpty && (\n        <ErrorMessage>Sorry, we don't have data about the cast</ErrorMessage>\n      )}{' '}\n      {isError && (\n        <ErrorMessage>Sorry, something wrong. {isError}</ErrorMessage>\n      )}\n    </section>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  box-shadow: ${({ theme }) => theme.shadows.small};\n  padding: 5px;\n`;\n\nexport const ImgWrap = styled.div`\n  padding-top: 5px;\n  margin-bottom: 15px;\n  /* width: 100px;\n  height: 80px; */\n`;\n\nexport const Character = styled.p`\n  padding-left: 20px;\n  margin-top: 10px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Messge = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  text-align: center;\n  font-size: 14px;\n  color: red;\n  font-weight: 700;\n  margin-top: 30px;\n`;\n","import PropTypes from 'prop-types';\nimport { Messge } from './ErrorMessage.styled';\n\nexport const ErrorMessage = ({ children }) => {\n  return (\n    <Messge role=\"alert\">\n      <h2>Oops! üò´</h2>\n      <p>{children}</p>\n    </Messge>\n  );\n};\nErrorMessage.propTypes = {\n  children: PropTypes.string,\n};\n","import styled from '@emotion/styled';\n\nexport const MoviesWrap = styled.div`\n  padding: 10px;\n\n  box-shadow: ${({ theme }) => theme.shadows.small};\n`;\n\nexport const MoviesList = styled.ul`\n  padding-left: 20px;\n`;\n","import PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nconst API_KEY =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkMDYzMDMzNGZmZTI2MzRlNmMyNjU2MjYzNmZhZWJiNCIsInN1YiI6IjY0ODYwNjIyZTM3NWMwMDBhY2M1ZTg5MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.cLWIZByOdSNx37MEXIfJi9nkHOUBUllZd6OPDNf-0CA';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nasync function getMovies(endpoint, params) {\n  const response = await axios.get(`${BASE_URL}${endpoint}`, {\n    params: {\n      ...params,\n      language: 'en-US',\n    },\n    headers: {\n      Authorization: API_KEY,\n      Accept: 'application/json',\n    },\n  });\n  if (response) {\n    return response.data;\n  } else {\n    throw new Error('Smth went wrong');\n  }\n}\n// try {\n//   const response = await axios.get(\n//     `${BASE_URL}${endpoint}`,\n//     {\n//       params: {\n//         ...params,\n//         language: 'en-US',\n//         // include_adult: false,\n//       },\n//       headers: {\n//         Authorization: API_KEY,\n//         Accept: 'application/json',\n//       },\n//     }\n//   );\n//   console.log(response.data); // –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞\n//   return response.data;\n// } catch (error) {\n//   <ErrorMessage>There are no such images ... Try again {error}</ErrorMessage>;\n//   console.error(error);\n// }\n\nexport default getMovies;\n\ngetMovies.propTypes = {\n  endpoint: PropTypes.string.isRequired,\n  params: PropTypes.object,\n};\n"],"names":["movieId","useParams","useState","casts","setCasts","isError","setIsError","isEmpty","setIsEmpty","useEffect","fetchMovieDetails","getMovies","data","cast","length","map","name","character","profile_path","src","baseImgUrl","alt","width","Wrapper","styled","theme","shadows","small","ImgWrap","Character","Messge","ErrorMessage","children","role","MoviesWrap","MoviesList","API_KEY","BASE_URL","endpoint","params","axios","language","headers","Authorization","Accept","response","Error","propTypes","PropTypes"],"sourceRoot":""}